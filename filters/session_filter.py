# filters/session_filter.py

import numpy as np
from typing import Callable, Dict, Any
import pandas as pd

from filters.base_filter import BaseFilter
from config import LOOKAHEAD_BARS, USE_FIXED_SPREAD, FIXED_SPREAD

class SessionFilter(BaseFilter):
    """
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–µ—Å—Å–∏—è–º (Asia, Europe, US). 
    –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑—å–º–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω —Ö–æ—Ç—è –±—ã N —Ä–∞–∑ –ø–æ—è–≤–ª—è–ª—Å—è –≤ —á–∞—Å–∞—Ö 
    –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å win_rate ‚â• –ø–æ—Ä–æ–≥.
    """

    def __init__(self, win_rate_th: float, occ_th: int):
        self.win_rate_th = win_rate_th
        self.occ_th = occ_th

        # –û–ø—Ä–µ–¥–µ–ª–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã —á–∞—Å–æ–≤ (–ø–æ UTC) –¥–ª—è —Ç—Ä—ë—Ö —Å–µ—Å—Å–∏–π:
        # üëâ 0‚Äì8: Asia, 8‚Äì16: Europe, 16‚Äì24: US
        self.sessions = {
            "Asia":   (0, 8),
            "Europe": (8, 16),
            "US":     (16, 24)
        }

    def is_good(
        self,
        key: str,
        train_df: pd.DataFrame,
        full_df: pd.DataFrame,
        best_cl: float,
        best_w: int,
        find_occ_func: Callable,
        compute_trade_stats_func: Callable
    ) -> bool:
        """
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∞—Å–æ–≤ —Å—á–∏—Ç–∞–µ–º: occurrences + wins –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ (–∑–∞ –≤—Å—é full_df).
        –ï—Å–ª–∏ –¥–ª—è –∫–∞–∫–æ–π-—Ç–æ —Å–µ—Å—Å–∏–∏ win_rate ‚â• win_rate_th –∏ occurrences ‚â• occ_th ‚Üí True.
        """
        df_stats = full_df.copy().reset_index(drop=True)
        directions = df_stats['direction'].values
        bodies = df_stats['body_size'].values
        opens = df_stats['open'].values
        highs = df_stats['high'].values
        lows = df_stats['low'].values
        closes = df_stats['close'].values
        hours = df_stats['hour'].values

        bids = df_stats['bid'].values if 'bid' in df_stats.columns else None
        asks = df_stats['ask'].values if 'ask' in df_stats.columns else None

        # –ù–∞–π–¥—ë–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        indices = find_occ_func(key, directions, bodies, opens, highs, lows, closes, best_w)
        if not indices:
            return False

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Å—Å–∏—è–º
        session_counts = {
            name: {"total": 0, "wins": 0}
            for name in self.sessions
        }

        for idx_local in indices:
            h = int(hours[idx_local])
            # –û–ø—Ä–µ–¥–µ–ª–∏–º, –∫ –∫–∞–∫–æ–π —Å–µ—Å—Å–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ—Ç —á–∞—Å
            for name, (start_h, end_h) in self.sessions.items():
                if start_h <= h < end_h:
                    # –£–∑–Ω–∞—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ:
                    if not USE_FIXED_SPREAD and bids is not None and asks is not None and not (np.isnan(bids[idx_local]) or np.isnan(asks[idx_local])):
                        entry_price = asks[idx_local]
                        spread = asks[idx_local] - bids[idx_local]
                    else:
                        entry_price = closes[idx_local]
                        spread = FIXED_SPREAD if USE_FIXED_SPREAD else 0.0

                    tp = entry_price + best_cl + spread/2
                    sl = entry_price - best_cl - spread/2

                    start = idx_local + 1
                    end = min(idx_local + LOOKAHEAD_BARS, len(closes) - 1)

                    hit_tp = False
                    hit_sl = False
                    for j in range(start, end + 1):
                        if highs[j] >= tp:
                            hit_tp = True
                            break
                        if lows[j] <= sl:
                            hit_sl = True
                            break

                    session_counts[name]["total"] += 1
                    if hit_tp:
                        session_counts[name]["wins"] += 1
                    # –ü—Ä–æ–∏–≥—Ä—ã—à/flat‚Äê—Å–¥–µ–ª–∫–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ wins

                    break  # –Ω–∞—à–ª–∏ —Å–µ—Å—Å–∏—é, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ sessions

        # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é
        for cnt in session_counts.values():
            t = cnt["total"]
            if t >= self.occ_th:
                wr = (cnt["wins"] / t) * 100
                if wr >= self.win_rate_th:
                    return True

        return False

    def collect_stats(
        self,
        key: str,
        df_stats: pd.DataFrame,
        find_occ_func: Callable,
        compute_trade_stats_func: Callable,
        cl_best: float,
        w_best: int
    ) -> Dict[str, Any]:
        """
        –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏ —Å –∫–∞–∫–∏–º win_rate –ø–∞—Ç—Ç–µ—Ä–Ω –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –≤ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏.
        –ù–æ trainer.py –æ–∂–∏–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ time‚Äê—Å—Ç–∞—Ç—ã, –ø–æ—ç—Ç–æ–º—É –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
        """
        return {}
